#%RAML 0.8

title: World Music API
baseUri: http://{bucketName}.api.com/{version}
baseUriParameters:
  bucketName:
    description: The name of the bucket
    type: string
    required: false
version: v1
securitySchemes:
    - JWT:
        description: |
            https://jwt.io/introduction/
        type: x-jwt
        describedBy:
            headers:
                Authorization:
                    description: |
                        The JSON Web Token to authenticate and valid the API request.
                        ```http
                        Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGkuaXdkLmZyIiwiZXhwIjoxNDU2MzczNTgzLCJzdWIiOiJmYWJpZW5AaXdkLmZyIn0.JNYCH-ml6ISVjqgkHdjmNo0bLHR9OJ1PAfZ8LxQXgAw
                        ```
                    type: string
                    required: true
schemas:
  - Song: !include song.json
  - Person: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "array",
        "description": "A list of songs",
        "items": {
          "$ref": "song.json"
        }
      }

/songs:
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include songs.json
  /{songId}:
    uriParameters:
      songId:
          type: integer
          required: true
    put:
      body:
        application/json:
            schema: !include song.json
        application/xml:
            schema: !include song.xml
      responses:
        200:
          body:
            application/json:
                schema: !include song.json
            application/xml:
                schema: !include song.xml
    get:
      securedBy: [JWT]
      queryParameters:
          isActivated:
              description: Filter by activate
              type: boolean
              example: true
          id:
              description: Filter by id
              type: integer
              minimum: 1
              maximum: 10
              example: 8
          price:
              description: Filter by price
              type: number
              maximum: 100
              minimum: 10
              example: 55.6
          vendor:
              description: Filter by vendor
              type: string
              enum: [test1,test2,test3]
              example: test1
          email:
              description: Filter by email (test pattern)
              type: string
              pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
              minLength: 7
              maxLength: 200
              example: diego.maradonna@argentina.com
          # array like parameters are not validated/converted
          choice[]:
              description: Filter by choice
              type: string
              repeat: true
          modificationDate:
              description: Modification date
              type: date
      responses:
        200:
          body:
            application/json:
              schema: !include song.json
    delete:
      description: |
        This method will *delete* an **individual song**
